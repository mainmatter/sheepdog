---
import { Image } from 'astro:assets';
import { LinkButton } from '@astrojs/starlight/components';
import type { ImageMetadata } from 'astro';

const PAGE_TITLE_ID = '_top';
const { data } = Astro.locals.starlightRoute.entry;
const { title = data.title ?? 'Sheepdog', tagline, image, actions = [] } = data?.hero ?? {};

const imageAttrs = {
	loading: 'eager' as const,
	decoding: 'async' as const,
	alt: image?.alt || '',
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
	if ('file' in image) {
		darkImage = image.file;
	} else if ('dark' in image) {
		darkImage = image.dark;
		lightImage = image.light;
	} else {
		rawHtml = image.html;
	}
}
---

<script>
	// Store original text content of nodes
	const originalContent = new WeakMap();
	let isWoofed = false;

	function toggleWoof(element: any) {
		const skipTags = ['SCRIPT', 'STYLE', 'INPUT', 'TEXTAREA'];

		if (skipTags.includes(element.tagName)) {
			return;
		}

		if (element.nodeType === Node.TEXT_NODE && element.textContent) {
			if (!isWoofed) {
				// Save original content before first woof
				originalContent.set(element, element.textContent);

				// Replace words with 'woof'
				const words = element.textContent!.split(/\b/);
				element.textContent = words
					.map((word: string) => (word.match(/[a-zA-Z]+/) ? 'woof' : word))
					.join('');
			} else {
				// Restore original content
				element.textContent = originalContent.get(element);
			}
		} else {
			Array.from(element.childNodes).forEach((child) => toggleWoof(child));
		}
	}

	document.querySelectorAll('[data-woof]')?.forEach((element) =>
		element.addEventListener('click', () => {
			toggleWoof(document.body);
			isWoofed = !isWoofed;
		}),
	);
</script>

<div class="hero">
	{
		darkImage && (
			<Image
				src={darkImage}
				{...imageAttrs}
				class:list={{ 'light:sl-hidden': Boolean(lightImage) }}
				data-woof
			/>
		)
	}
	{lightImage && <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden" data-woof />}
	{rawHtml && <div class="hero-html sl-flex" set:html={rawHtml} />}
	<div class="sl-flex stack">
		<div class="sl-flex copy">
			<h1 id={PAGE_TITLE_ID} data-page-title set:html={title} />
			{tagline && <div class="tagline" set:html={tagline} />}
		</div>
		{
			actions.length > 0 && (
				<div class="sl-flex actions">
					{actions.map(({ attrs, icon, link: href, text, variant }: any) => (
						<LinkButton {href} {variant} icon={icon?.name} {...attrs}>
							{text}
							{icon?.html && <Fragment set:html={icon.html} />}
						</LinkButton>
					))}
				</div>
			)
		}
	</div>
</div>

<style>
	.hero {
		display: grid;
		align-items: center;
		gap: 1rem;
		padding-bottom: 1rem;
	}

	.hero > img,
	.hero > .hero-html {
		object-fit: contain;
		width: min(50%, 15rem);
		height: auto;
		margin-inline: auto;
	}

	.stack {
		flex-direction: column;
		gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
		text-align: center;
	}

	.copy {
		flex-direction: column;
		gap: 1rem;
		align-items: center;
	}

	.copy > * {
		max-width: 50ch;
	}

	h1 {
		font-size: var(--sl-text-4xl);
		line-height: var(--sl-line-height-headings);
		font-weight: 600;
		color: var(--sl-color-white);
	}

	.tagline {
		font-size: var(--sl-text-2xl);
		line-height: var(--sl-line-height-headings);
		color: var(--sl-color-gray-2);
	}

	.actions {
		gap: 1rem 2rem;
		flex-wrap: wrap;
		justify-content: center;
	}

	.actions > :global(.primary) {
		background: var(--sheepdog-primary) !important;
		text-transform: uppercase;
		font-weight: 700;
		border-radius: 1.25rem;
	}

	:global([data-theme='dark']) .actions > :global(.primary) {
		--sl-color-black: var(--sl-color-white);
	}

	@media (min-width: 50rem) {
		h1 {
			font-size: calc(var(--sl-text-6xl) * 1.2);
		}

		.tagline {
			font-size: var(--sl-text-4xl);
		}

		.hero {
			grid-template-columns: 7fr 4fr;
			gap: 3%;
			padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
		}

		.hero > img,
		.hero > .hero-html {
			width: min(100%, 15rem);
		}

		.stack {
			text-align: start;
		}

		.copy {
			align-items: flex-start;
		}

		.actions {
			justify-content: flex-start;
		}
	}

	.hero {
		grid-template-columns: 1fr;
		place-items: center;

		& :where(.copy, .actions) {
			justify-content: center;
			align-items: center;
		}
	}
</style>
