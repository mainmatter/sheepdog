---
import '@fontsource/calistoga';
import '@fontsource/pt-sans';

import Example from '../content/docs/Example.svelte';
import Demo from '../components/demo.svelte';

import { Code, Tabs, TabItem } from '@astrojs/starlight/components';

const sheepdogDemoCode = `
<script>
	import { task, timeout } from '@sheepdog/svelte';
	
	let searchTask = task.restart(async function(value) {
		await timeout(500);
		let response = await fetch('/my-favourite-sheep?search=' + value);
		return await response.json();
	});
</script>

<label for="search">Search</label>
<input
	name="search"
	type="text"
	oninput={(event) => searchTask.perform(event.target.value)}
/>

{#if searchTask.isRunning}
	Loading...
{:else if searchTask.lastSuccessful?.value.length}
	<ul>
		{#each searchTask.lastSuccesful.value as name}
			<li>{name}</li>
		{/each}
	</ul>
{:else}
	No sheep found
{/if}
`;

const nativeDemoCode = `
<script>
	let _currentValue;
	let timeout;
	let search = (value) => {
		if (timeout) {
			clearTimeout(timeout);
		}
	
		let _timeout = setTimeout(async () => {
			let response = await fetch('/my-favourite-sheep?search=' + value);
			let results = await response.json();
			// only set results if this is the last started search
			if (timeout === _timeout) {
				currentValue = results;
				timeout = undefined;
			}
		}, 500);
		timeout = _timeout;
	};

	$: isRunning = Boolean(timeout);
	$: currentValue = _currentValue;
</script>

<label for="search">Search</label>
<input
	name="search"
	type="text"
	oninput={(event) => search(event.target.value)}
/>

{#if timeout}
	Loading...
{:else if currentValue?.length}
	<ul>
		{#each currentValue as name}
			<li>{name}</li>
		{/each}
	</ul>
{:else}
	No sheep found
{/if}
`;
---

<section class="description">
	<h2>Task management made simple</h2>
	<p>
		Sheepdog helps you maintain your async tasks and gives you useful derived state in your
		Svelte app.
	</p>
	<p><i>Because managing tasks shouldn't feel like chasing sheep.</i></p>
</section>

<section class="demo">
	<div>
		<h3>Code</h3>
		<div class="tabbed-code-wrapper">
			<Tabs>
				<TabItem label="Sheepdog">
					<Code lang="svelte" code={sheepdogDemoCode} />
				</TabItem>
				<TabItem label="Native">
					<Code lang="javascript" code={nativeDemoCode} />
				</TabItem>
			</Tabs>
		</div>
	</div>
	<div>
		<h3>Demo</h3>
		<div>
			<Demo client:load />
		</div>
	</div>
</section>

<section class="task-modifiers">
	<h2>Task modifiers</h2>
	<p>Specify what your task should do if there's another instance already running.</p>

	<Example show_tabs={true} client:load />
</section>

<style>
	:root {
		--sl-color-white: #f9f0e3;
		--sl-color-black: #3c3835;
		--sl-color-text-accent: var(--sl-color-white);
	}
	:root[data-theme='light'] {
		--sl-color-black: #f9f0e3;
		--sl-color-text-accent: var(--sl-color-white);
	}

	:global(body) {
		font-family: 'PT Sans', sans-serif;
		font-weight: 400;
		font-style: normal;
	}

	:global(h1, h2, h3, h4, h5, h6) {
		font-family: 'Calistoga', serif !important;
		font-weight: 400;
		font-style: normal;
	}

	.description {
		margin-bottom: 4rem;
	}

	.description p + p {
		margin-top: 0.5rem;
	}

	.demo {
		width: 100%;
		margin-bottom: 100px;
	}

	@media (min-width: 768px) {
		.demo {
			display: grid;
			grid-template-columns: 65% 35%;
			gap: 2rem;
		}

		.demo > div {
			margin-top: 0 !important;
		}
	}

	.tabbed-code-wrapper {
		border: 2px solid var(--sl-color-white);
		border-radius: 1.25rem;
	}

	.tabbed-code-wrapper :global(.tablist-wrapper) {
		display: flex;
		justify-content: end;
		margin-top: -2px;
		margin-right: -2px;
	}

	.tabbed-code-wrapper :global(section[role='tabpanel']) {
		margin-top: 0;
	}

	.tabbed-code-wrapper :global(.tablist-wrapper ul) {
		border: 2px solid var(--sl-color-white);
		border-radius: 1.5rem;
	}

	.tabbed-code-wrapper :global(.tablist-wrapper li) {
		margin: 0;
	}

	.tabbed-code-wrapper :global(.tablist-wrapper a[role='tab']) {
		border: none;
		padding: 0.25rem 1.5rem;
		border-radius: 1.5rem;
		color: var(--sl-color-text);
		font-weight: bold;
	}

	.tabbed-code-wrapper :global(.tablist-wrapper a[role='tab'][aria-selected='true']) {
		background: var(--sl-color-white);
		color: var(--sl-color-text-invert);
	}

	.tabbed-code-wrapper :global(.expressive-code .frame) {
		box-shadow: none;
	}

	.tabbed-code-wrapper :global(.expressive-code .frame pre) {
		border: none;
		background: none;
	}

	.task-modifiers {
		max-width: 600px;
		margin: 0 auto;
	}
</style>
